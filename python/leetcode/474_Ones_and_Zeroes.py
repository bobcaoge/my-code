# /usr/bin/python3.6
# -*- coding:utf-8 -*-


class Solution(object):
    memo = {}

    def recursion(self, strs, start, m, n):
        if self.memo.get((start, m, n), 2**32) != 2**32:
            return self.memo.get((start, m, n))
        num = 0
        for i in range(start, len(strs)):
            cur_zero_need = strs[i][0]
            cur_one_need = strs[i][1]
            if m >= cur_zero_need and n >= cur_one_need:
                value = self.recursion(strs, i+1, m-cur_zero_need, n-cur_one_need) + 1
                num = max(num, value)
        self.memo[(start, m, n)] = num
        return num



    def findMaxForm1(self, strs, m, n):
        """
        :type strs: List[str]
        :type m: int
        :type n: int
        :rtype: int
        """
        self.memo = {}
        return self.recursion(strs, 0, m, n)

    def findMaxForm2(self, strs, m, n):
        """
        :type strs: List[str]
        :type m: int
        :type n: int
        :rtype: int
        """
        dp = [[[0 for l in range(n+1)] for j in range(m+1)] for i in range(len(strs)+1)]
        for i in range(len(strs)+1):
            zeros_need = 0
            ones_need = 0
            if i>0:
                zeros_need = strs[i-1].count("0")
                ones_need = strs[i-1].count("1")
            # print(zeros_need, ones_need, end=", ")
            for j in range(m+1):
                for k in range(n+1):
                    if i == 0:
                        dp[i][j][k] = 0
                    elif j >= zeros_need and k >= ones_need:
                        dp[i][j][k] = max(dp[i][j][k], dp[i-1][j][k], dp[i-1][j-zeros_need][k-ones_need]+1)
                    else:
                        dp[i][j][k] = dp[i-1][j][k]
        return dp[len(strs)][m][n]

    def findMaxForm(self, strs, m, n):
        """
        :type strs: List[str]
        :type m: int
        :type n: int
        :rtype: int
        """
        dp = [[0]*(n+1) for _ in range(m+1)]
        for i in range(1, len(strs)+1):
            zeros_need = strs[i-1].count("0")
            ones_need = strs[i-1].count("1")
            buff = [[0]*(n+1) for _ in range(m+1)]
            for j in range(m+1):
                for k in range(n+1):
                    if j >= zeros_need and k >= ones_need:
                        buff[j][k] = max(buff[j][k], dp[j][k], dp[j-zeros_need][k-ones_need]+1)
                    else:
                        buff[j][k] = dp[j][k]
            dp = buff
        return dp[m][n]
def main():
    s = Solution()
    print(s.findMaxForm(["10", "0001", "111001", "1", "0"], m = 5, n = 3))
    print(s.findMaxForm(["10", "0", "1"], m = 1, n = 1))
    print(s.findMaxForm(["0","11","1000","01","0","101","1","1","1","0","0","0","0","1","0","0110101","0","11","01","00","01111","0011","1","1000","0","11101","1","0","10","0111"],
                        9,
                        80,))
    print(s.findMaxForm(["1","0","1","0","1","0","1","0","1","0","1111","0","1","0","1","0","1","0000","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0"],
                        30,
                        30,))
    print(s.findMaxForm(["1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101"]
                        ,100,
                        100))


if __name__ == "__main__":
    main()
